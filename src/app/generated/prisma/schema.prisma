generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?  @unique
  password  String
  name      String
  image     String?
  role      Role     @default(STUDENT)

  isDisabled Boolean @default(false)

  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?  @unique
}

model Student {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  studentId    Int      @unique @default(autoincrement())
  fullName     String
  gender       String
  dob          DateTime
  doa          DateTime
  mobile       String
  bloodGroup   String?
  studentImg   String?
  address      String?
  others       String?
  fatherName   String
  motherName   String
  fatherPhone  String
  gurdianName  String
  relation     String
  gurdianPhone String

  enrollments Enrollment[]
  results     Result[]

  User User?

  @@index([studentId])
}

model AcademicYear {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  year      Int      @unique
  current   Boolean  @default(false)

  enrollments Enrollment[]
  results     Result[]
}

model Class {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  className   String   @unique
  sectionName String[]

  enrollments Enrollment[]
  results     Result[]
}

model Enrollment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String

  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String

  class   Class  @relation(fields: [classId], references: [id])
  classId String

  section   String
  status    EnrollmentStatus
  classRoll Int
}

model Result {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  gpa        Float?
  status     ReusltStatus
  type       ExamType
  totalMarks Int
  position   Int?

  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String

  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId String

  section String

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  subjects Json[]
}

model Notice {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  file      String
}

enum Role {
  STUDENT
  ADMIN
  TEACHER
}

enum ReusltStatus {
  PASSED
  FAILED
}

enum ExamType {
  MIDTERM
  FINAL
}

enum EnrollmentStatus {
  ADMITTED
  PROMOTED
  REPEATED
  LEFT
}
